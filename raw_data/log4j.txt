title=Add Spring Boot integration to Log4j Boot
explanation=The Spring Boot integration packaged by Spring for Log4j2 uses SLF4J libraries instead of the Log4j ones. 
expected=This module should use native Log4j bridges and use native functionality wherever possible.
expected=This should include sensible default config files ported from spring-boot-starter-log4j2.


title=Dynamic Subject for SMTP Appender
current=It is annoying to have log messages sent to users via SMTP Appender with a static subject, requiring recipients to open each of possibly a vast amount of log emails in order to find out what went wrong.
expected=Users should be able to insert runtime diagnostic context information to the message text AND to the message subject as well.
explanation=While the first seems to be working with Patternlayout using the mechanism with the %X pattern based on a NDC or MDC <key> in the "ConversionPattern" parameter, it does NOT work with the "Subject" parameter with log4j (neither 1.2 nor 2.x), though some bloggers suggest it, e.g. [URL].
example=See [URL] as an example where others found this also.
useless=This issue should have been fixed long ago.
expected=I suggest to extend SMTP appender in order to be able to use %X and other Pattern conversion in the "Subject" parameter properly.
explanation=[URL] has already done the part for applying PatternLayout to the SMTP Appender "Subject". 
explanation=I didn't test if this works properly. 
explanation=Maybe this work can be included into log4j with minimal effort?
explanation=This feature has originally been realized in LOGBACK using an MDC in Patternlayouts: [URL]


title=Add a ScriptAppenderSelector to create an Appender specified by a Script
explanation=The use case is to create an OS-based dynamic configuration file.
expected=The script determines which appender to use (once), and instantiates that appender (once). 
expected=There is no need for one appender to delegate to another appender.
benefit=This feature helps you build your configuration dynamically, all from the configuration file, to determine which appenders to configure. 
explanation=This is different from using a RoutingAppender which creates a level of indirection and decides what to do for each log event at runtime.
explanation=You can use multiple ScriptSelector Appenders if needed.
example=For example:<CODE>


title=Line-wise common suffix support for %ex pattern
current=The LOG4J2-1838 issue provide us with the feature to print a common suffix to each line of a stack trace. 
current=But it only implemented the feature for the %rEx and %xEx pattern, not yet for the %ex pattern. 
expected=This issue is intended to implement the feature for the %ex pattern.

 
title=Please facilitate subclassing Logger and LoggerContext (in org.apache.logging.log4j.core)
expected=I would like to create a custom logger, while reusing the <FILE> functionality.
explanation=The following two changes would make subclassing possible:<LIST>
explanation=My use case is that I want to create an asynchronous Logger for low latency logging.
explanation=This custom logger hands off control to a separate thread as early as possible. 
drawback=In my case, AsynchAppender is not a good match for my requirements, as with that approach (a) the logging call still needs to flow down the hierarchy to the appender, doing synchronization and creating objects at various points on the way, and (b) when serializing the LogEvent, the getSource() method is always called, which is expensive.


title=Add support for appending common suffix to each line of throwable stack trace
expected=Add support for appending common suffix to each line of throwable stack trace. 
explanation=The suffix can be configured by patterns just like patterns used elsewhere.
example=For example, pattern %xEx{suffix(- %mdc{key})} will append a string generated by pattern - and %mdc{key}.
explanation=But patterns that handles throwable will be automatically ignored, because they will make the rendered result confusing. 
explanation=So pattern %xEx{suffix(- %rEx%mdc{key})} has the same effect with %xEx{suffix(- %mdc{key})}, as if the nested %rEx pattern has never appeared.
example=Following is an example of the with such suffix: [CODE]


title=Add StatusLoggerRule to allow unit tests to set a status level
expected=In unit tests that do not use a configuration file, it would be useful to have a JUnit rule that allows the default status logger level to be set. 
example=For example, some tests are for error scenarios that spew out a lot of status messages that are expected errors and make the unit test output hard to interpret. 
benefit=In such tests, this rule could be used to set the level to FATAL or OFF. 
benefit=This could also be used for debugging purposes.


title=Add support for java.util.concurrent.LinkedTransferQueue to AsyncAppender
expected=Add support for the Java 1.7+ class LinkedTransferQueue as an alternative to using ArrayBlockingQueue. 
expected=In addition, this class provides the tryTransfer() method which is faster than using offer(), so add support for using that.


title=Allow one of a number of patterns to be used in PatternLayout
expected=It is desirable to be able to format messages using different patterns based on attributes of the LogEvent. 
example=For example, it would be useful to format events with the FLOW marker differently than normal events.


title=Provide access to config properties in LoggerConfig
current=Custom Loggers that want to support configuration properties when creating custom LogEvent objects currently have no easy way to access these configuration Property objects.
current=The configuration Property map in LoggerConfig is private. 
expected=Please provide an accessor method that returns a (read-only) view of this Property map.
example=proposal: add below method to <PATH>: [CODE]


title=Allow Builders to be completely generic
expected=Allow Builders to be completely generic. 
explanation=This is not just supporting Builder<T>, which works in 2.6.2, but to allow declarations like Builder<B extends Builder<B>> combined with setters that return B.
useless=I have a patch for this
expected=The next step (and ticket) will be to allow to use a Builder that extends another Builder.


title=Add lookup for JVM arguments
expected=Access JVM input properties with the prefix jmx-input by index or name, 
example=like main arguments for LOG4J2-771.


title=Add ThreadContextMap.putAll(Map<String, String>)
expected=Add API [CODE]
expected=My immediate goal is to be able to build a JUnit Rule to save and restore the thread context around each unit test method and/or a given class.
example=See LOG4J2-1517<LINK>.


title=Please provide means to disable NDC functionality on a global level.
current=Disabling NDC evaluation can have drastic effects on event size while sending them over the wire or dumping them to disk.
current=When disabled, all calls to NDC-related methods will instead call NOP implementations, 
example=for example, no ThreadLocals would be used at all.


title=Add optional support for Conversant DisruptorBlockingQueue in AsyncAppender
benefit=Conversant Disruptor works as an implementation of BlockingQueue that is much faster than ArrayBlockingQueue. 
benefit=I did some benchmarks earlier and found it to be a bit faster:


title=Configure RandomAccessFileAppender buffer size
expected=Add feature for Appenders to support buffer, which will store log in to memory(app/system) and write in to file when it reaches buffer size provided.
useless=this is possible?
useless=If this feature is already available, could you please provide me reference for it?
useless=Thanks in advance.


title=Add converters and validators related to hostnames and ports
expected=Add TypeConverter implementations for InetAddress, and add a constraint validator for a valid hostname. 
benefit=This would be useful for plugins such as a Cassandra appender (LOG4J2-1730).


title=New Appender for Apache Kafka
expected=It would be useful to have an Appender which sends log events to an Apache Kafka topic.


title=Add TLS support to SyslogAppender
current=Currently, there is no TLS support in SyslogAppender.
expected=It would be very nice if one could send encrypted syslog messages to syslog daemons.
explanation=I think the use cases are obvious: you want to protect your syslog messages against masquerade, modification and disclosure.


title=TCP and UDP socket servers should be able to handle JSON log events
expected=TCP and UDP socket servers should be able to handle JSON log events
explanation=The following will implement the conversion: [CODE]


title=Please provide means to disable MDC functionality on a global level.
current=Disabling MDC evaluation can have drastic effects on event size while sending them over the wire or dumping them to disk.
current=When disabled, all calls to MDC-related methods will instead call NOP implementations, 
example=for example, no ThreadLocals would be used at all.


title=Add a way to route messages based on the %marker in Layout for RoutingAppender
useless=Hi,
current=It seems there's no way to route messages based on the Marker in the RoutingAppender. 
explanation=The "%marker" is not part of the Layout. 
benefit=When using SLF4J, since it's a core feature of the facade, this would help greatly if it was possible to route messages based on the Marker.
example=Main StackOverFlow question (answered) : [URL]
example=Workaround StackOverFlow question (answered) : [URL]
useless=Thank you


title=Introduce interfaces IndexedStringMap and IndexedReadOnlyStringMap
expected=This ticket proposes to introduce a public interface that imposes a total ordering over the keys of a (ReadOnly)StringMap. 
explanation=This interface views all key-value pairs as a sequence ordered by key, and allows keys and values to be accessed by their index in the sequence.
explanation=The intention is to let SortedArrayStringMap implement these interfaces. 
explanation=It already implements the necessary methods; the visibility of these methods will change from package-protected to public.
benefit=These interfaces help reduce log4j's dependency on the JDK Map interface: the JDK Map interface does not provide a garbage-free way to iterate over all its keys or key-value pairs.
example=For example, these interfaces can be used to make MapFilter and its subclasses garbage-free, and reduce allocation of temporary objects in MapMessage and subclasses.


title=Add MessageFactory that reuses a cached Message instance
current=As discussed in LOG4J2-1270, all current MessageFactory implementations create new temporary Message objects. 
expected=A GC-free configuration needs a different MessageFactory that reuses Message instances.
explanation=When Messages are being reused, async logging components need to be aware of this and ensure the Message content (rather than the Message instance itself) is passed to the background thread. 
explanation=However, Messages that are not reusable should be passed to the background thread unchanged.


title=Stream-Interface for Loggers
expected=I would like to have method (or class) to use a logger as a PrintStream
example=like for example: <CODE> or maybe like this <LINK>


title=New RewritePolicy for changing level of a log event
expected=It would be useful to have a RewritePolicy for changing the level of a log event.
expected=Some 3rd party libraries log stuff on wrong level, and I would like to be able to translate it.


title=Provide enhanced logger filtering support.
current=We wrote our own logging framework primarily because log4j didn't provide some of the features we needed. 
explanation=Our software runs on behalf of many companies, products and users all in the same JVM. 
expected=We have a requirement to be able to enable logging based on some of these factors. 
example=For example, we might want to enable debug logging only for a specific company or even a specific user. 
explanation=All our requests store attributes, such as the companyId, product name and userid in the MDC.
expected=So the real requirement here is to be able to filter log records early based on more information than just the log level. 
example=For example, our requirement could be met by a filter that could be configured to associate a log level with a company id. 
explanation=Then when debug is called a check would first be done to see if debug was enabled for that company id and then whether debug was enabled for that logger. 
explanation=These checks cannot be done as filters on Appenders as the performance of the system is dramatically impacted as isDebugLogging really needs to return false for all company ids other than the one that is enabled.
example=This feature is similar to LogBack's TurboFilter, except I would like it implemented differently. 
explanation=I would recommend that the filter be specified globally but referenced on each logger to which it applies, much as the specification of Appenders is done.


title=JNDI Lookup plugin support
current=Currently, Lookup plugins don't support JNDI resources.
expected=It would be really convenient to support JNDI resource lookup in the configuration.
explanation=One use case with JNDI lookup plugin is as follows:
explanation=I'd like to use RoutingAppender to put all the logs from the same web application context in a log file (a log file per web application context).
explanation=And, I want to use JNDI resources look up to determine the target route (similarly to JNDI context selector of logback).
benefit=Determining the target route by JNDI lookup can be advantageous because we don't have to add any code to set properties for the thread context and JNDI lookup should always work even in a separate thread without copying thread context variables.


title=Add a logformat token for nanotime
expected=Add a token in the log format specifier to output the current value of [CODE].
benefit=We are currently adding the nanotime value to our log messages manually, which we find very useful for troubleshooting unexpected latency, and as a quick-and-dirty data source to feed into performance analysis tools.
expected=It would be very nice if Log4j could do this for us. 
expected=It would also be nice to have this in the log format specified, so we can turn it on/off at runtime by editing the Log4j config file.


title=Better control over timestamp
explanation=For apps which require very accurate event times, the timestamp must be provided by the app. 
current=In log4j 1.2 it is assigned when the event is created, which is the time the event is appended. 
current=This could be many milliseconds after the actual generation of the event. 
benefit=This also gives the app the ability to collect event milestones and then choose at the end of the processing whether or not to have them sent to an appender and still control the timestamp.


title=Allow RollingFileAppender to do Rolling with a Date Pattern or DailyRollingFileAppender to have Max Backup Parameter
expected=It would be nice to be able roll files with a date pattern and not just an index while still being able to specify the max file size and number of copies to keep. 
expected=Alternatively it would be good to be able to us the DailyRollingFileAppender with a max copies to keep parameter


title=Scala wrapper for Log4j 2 API
explanation=Scala wrapper for Log4j 2 API which makes use of Scala features like macros and string interpolation.
expected=Inspired from Typesafe's Scala Logging but should use Log4j 2 directly and expose its features.


title=API change: add methods for logging CharSequences (was: Provide support for CharSequence parameters for low and zero-GC applications)
explanation=Currently, the preferred way of logging character sequences in log4j 2 is by passing in tokens of type <CODE>. 
benefit=It would be very beneficial if the API could provide methods that take <CODE> tokens. 
benefit=This would allow high performance zero or low-GC applications to re-use the existing mutable structures implementing <CODE> for continuous logging without new objects being created.
expected=A high-performance implementation of the logger would be expected to copy out the contents of a single or multiple instances of <CODE> so that they could be re-used in the subsequent logging call.


title=[PatternLayout] Add an ANSI option to %xThrowable
example=See screenshot attachments.
expected=The idea is to print out exceptions to the console using colors to make some information more obvious and liven things up. 
current=The current style choices are arbitrary as are the style names Spock and Kirk.
current=This is currently in branch StyledXException.
benefit=A positive side effect of this code is that extended exceptions are rendered on a StringBuilder so less garbage is generated.


title=Add support for embedding the Flume agent into the Flume Appender.
explanation=Apache Flume provides guaranteed delivery to the target log repository. 
explanation=Embedding the agent into the Appender means control will be returned to the application as soon as possible.


title=Specify the SocketAppender connect timeout value as part of the configuration
current=I was testing the use case of taking the logserver down for maintenance and noticed that the SyslogAppender doesn't provide a way to override the default socket timeout. 
drawback=This resulted in my application noticeably hanging on startup when waiting for the socket to timeout.
explanation=As a short term fix I created an extension largely based on the SyslogAppender that includes the connection timeout as a configurable parameter (timeoutMillis). 
expected=I'd like something like this to be added in a future revision so I don't have to maintain this extension. 
explanation=Here's my version:


title=Date based file appender
expected=I'd like to reintroduce the option of logging to a file that has the current date in it.
example=For example, when the app starts up, it will start logging to <FILE>. 
explanation=At midnight, it starts logging to a new file named <FILE>.
current=Log4j2's RollingFileAppender does not support this. 
current=In log4j2 the file appender will log to one file with a static file name, and then the content is moved over to another file.
explanation=This used to be a feature in log4j 1.3, when using extras. 
example=I would configure it like this:


title=Support composite configurations
current=Support was added to XMLConfiguration to allow XIncludes in the XML files. 
drawback=While this can be useful it does not allow for the use case where someone wants a default configuration and then a custom configuration to be merged with it.
expected=I am proposing creating a CompositeConfiguration class that accepts a comma separated list of configuration files. 
explanation=It would then use the Configuration factories to create the appropriate Configuration classes for each of the underlying files. 
explanation=It would then merge the Node hierarchies created by each into a single tree and then finally construct the actual configuration Objects from that tree.
explanation=There are a few issues with this - 
example=for example each configuration can specify debug and verbose attributes, duplicate property settings, handling duplicate Appender names, etc. 
explanation=Most of these should be fairly easy to resolve.


title=The Logging API should support a Message object
current=RFC 5424 defines StructuredData. 
current=While implementing this for Logback it was found that making SLF4J support a Message interface and then providing Message definitions for a "SimpleMessage" (message text only), "ParamaterizedMessage" (message plus substitution parameters) and StructuredDataMessage (a message that allows the formatted message to conform to RFC 5424) allows the API to be easily extendable with new Message types and makes it more efficient to pass them through the logging implementation.
expected=Log4j 2.0 should incorporate this into both the API and the implementation. 
benefit=This will allow for easy implementation of a SyslogAppender that conforms with the new Syslog specification 
example=see <LINK>
benefit=as well as using the RFC 5424 as a standard layout that can be used to transport messages via JMS or other protocols.
example=See <LINK> and <LINK> for examples of how I accomplished this for slf4j and logback.


title=Allow plugins outside of Log4j 2 core to be preloaded.
current=Loading plugins in Log4j 2 core is fast and easy because they have been added to the preload map. 
current=However, the FlumeNG appender and components in other packages must be loaded at runtime. 
expected=This enhancement should allow any component to contain a preload map and all of them should be loaded together.


title=Support existing ability to modify any of an event's fields
explanation=RewriteAppender and RewritePolicy in log4j 1.2 give appender writers the ability to change events before they are sent to appenders. 
example=Two examples: 


title=Add optional support for JCTools in AsyncAppender
expected=Spawning from the discussion in LOG4J2-1430, this feature request is to add support for using JCTools MPSC bounded lock-free queue in AsyncAppender.
explanation=As the work for this issue stems from the work in 1430, the code is all contained in the same branch.


title=Add Cassandra (NoSQL) appender
expected=Add an appender for Cassandra. 
explanation=This should be able to follow the same pattern as the other NoSQL appenders, or possibly the JDBC style appenders as Cassandra does normally use a SQL-like language called CQL.
example=There are numerous Java drivers available for Cassandra: [URL]
explanation=The main driver I'm familiar with is the Datastax driver as it's the one used by spring-data, but it may be worth comparing the various drivers to see if any of them would fit better into the architecture of log4j already.


title=Serialize configuration into a log4j2.xml file
benefit=This would be useful for e.g. converting from Log4j 1 to Log4j 2 config.


title=Add a TypeConverter for UUID
expected=Add a TypeConverter for UUID. 
benefit=This will be useful in custom appenders that wish to convert a string into a native UUID 
example=for example, the UUID column type in Cassandra or Postgres


title=Automated testing to verify no temporary objects allocated in gc-free configuration
explanation=LOG4J2-1270 proposes changes to support gc-free behaviour (no allocation of temporary objects) in certain configurations.
explanation=This ticket is about verifying that Log4j does not allocate in these configurations. 
explanation=It is not always obvious that some code creates objects, so it is easy for regressions to creep in during maintenance code changes.
expected=Ideally this verification is packaged so it can run automatically during the test phase of the build, 
example=for example in a JUnit test.


title=WebLookup
expected=Add a "web" lookup plugin for resolving a webapp's root directory. 
explanation=Investigate whether it can be included in BaseConfiguration's list of hard-wired plugins.


title=Allow shutdown hook registration handling to be customizable
expected=Besides the ability to enable or disable the shutdown hook, there should be a ShutdownRegistrationStrategy interface for customizing how to register a shutdown callback in LoggerContext. 
explanation=This will allow application servers to specify their own class that can register the shutdown callback for a LoggerContext.
expected=To make this really flexible, Log4jContextFactory should be the class that creates the ShutdownRegistrationStrategy.
explanation=The basic idea behind this feature is already implemented. 
expected=I'd like to make this API a bit better before 2.1 so we aren't stuck with a useless interface later on.


title=Create a YAML layout
expected=Create a YAML layout; 
explanation=this will reuse what we already have for XML and JSON through Jackson.


title=Create SMTPAppender
explanation=Somebody in twitterverse reverted back to log4j 1.2 because he missed the SMTP Appender


title=Update Logger Wrapper Generator tool for new API methods
explanation=The Logger interface has additional methods that accept a CharSequence (LOG4J2-1326) and with unrolled varargs (LOG4J2-1278).
expected=The Generate tool should generate code for these methods.


title=JMX Client GUI should dynamically update when LoggerContext MBeans are registered/unregistered in MBean server
current=Currently the Log4J2 JMX Client GUI will take a snapshot of the MBean server state when the client GUI is started. 
current=The GUI displays a tab for each LoggerContextAdmin MBean that existed at startup time.
current=This is a static snapshot: these tabs do not change if the LoggerContext MBean is unregistered while the GUI is active. 
current=Also, if additional LoggerContext MBeans are registered after the GUI was started, the GUI will not be "aware" of this and will not display new tabs for the added LoggerContext.
expected=This ticket is a request to dynamically update the GUI in response to LoggerContext MBeans being registered/unregistered after the GUI was started.


title=Add support for JSR 223 scripts in filters and the PatternSelector.
expected=Sometimes more flexibility is required in filtering and in selecting a pattern for the PatternLayout. 
explanation=This enhancement provides support for JSR 223 scripts.



title=Ability to change the fileName dynamically in RollingFileAppender
current=Right now RollingFileAppender rolls over the current file with fileName to the one generated by FilePattern. 
current=However, logging always continues in the same fileName for example fileName once created cannot be changed.
current=Property Substitution is only once during initialization, fileName is never changed after RollingFileManager is initialized. 
current=The RollingFileManager is very tightly tied up to the fileName attribute.
explanation=Consider that I want to name my log files like this using RollingFileAppender:
drawback=There is no good way to achieve this, because even after rolling over the file, the fileName would still remain the same. 
drawback=If I initialized my fileName using ${date:yyyy-MM-dd}, date would be substituted only once during initialization and it would never change, always continue to log in the same log file (until I restart my application).


title=Create a Layout and SyslogAppender that support RFC 5424
explanation=RFC 5424 ([URL]) was made a standard in March of 2009. 
expected=Log4j 2.0 should provide a Layout and SyslogAppender that implements this standard.


title=Add JSON encoding support to EncodingPatternConverter %encode{}.
explanation=The existing implementation of EncodingPatternConverter is for escaping output for HTML specifically. 
expected=This pattern converter should be extended to allow multiple types of encoding. 
expected=The existing HTML behavior should be the default, but an optional second parameter should be added to allow specifying a different format to encode for.
example=For JSON, encoding would require the following:


title=Add support for filtering input in TcpSocketServer and UdpSocketServer
expected=It is best practice to add a configurable class filter to ObjectInputStream usage when input comes from untrusted sources. 
expected=Add this feature to TcpSocketServer and UdpSocketServer along with sensible default settings. 
explanation=This feature is unnecessary in JmsServer as that relies on the underlying configuration of the JMS server 
example=for example, ActiveMQ has a similar configuration option

title=[Android] Compilation error when using log4j 2.9.0
current=while trying to run the app with 2.9.0 we are facing the below exception.
explanation=[TRACE]
class=bug-1-2038

title=Error using %K in pattern : MapPatternConverter cannot contain multiple static newInstance method
current=When using a %K in a pattern, the [METHOD] is used and there is an error message: [TRACE]
explanation=The control is done by [CLASS] here: [CODE]
explanation=The class [CLASS] contains 2 newInstances message
explanation=[CODE]
class=bug-2-2564

title=RequestContextMappings should ignore private and instance fields
current=RequestContextMappings inspects the user defined class passed as a constructor parameter, but it checks all fields, instead of just the public static ones (at least that's what I understand it should do).
explanation=In Java 8 the issue is covered by catching an IllegalAccessException when accessing the field value, but in Java 11 this throws a NullPointerException for non-static fields.
explanation=The proposed solution would be to replace clazz.getDeclaredFields() with clazz.getFields(), to obtain only the accessible public fields, and then check them to process only the static ones.
class=bug-3-2578

title=Android: Could not find class 'javax.naming.InitialContext', referenced from method org.apache.logging.log4j.core.lookup.JndiLookup.lookup
current=Hi guys, i'm trying to use Log4J2 in an Android (19) application and it's not working. 
explanation=Here is the code i have and the stacktrace i obtain when running the application.
explanation=Am i missing something or is Log4J2 not working yet in an Android environment ?
explanation=[CODE]
explanation=[TRACE]
explanation=[CODE]
class=bug-4-703

title=Log4j2 Main Arguments Lookup by name doesn't work
explanation=Accessing Main Arguments by using index based look up works: [PARAMS]
current=Accessing Main Arguments by using name based look up doesn't work: [PARAMS]
current=When trying to access by name it doesn't retrieve the argument but retrieves [FILE]
class=bug-5-1013

title=Invalid JSON in JsonLayout
current=Using the log4j2 JsonLayout can result in invalid JSON. 
explanation=Some parsers could not parse this syntax.
explanation=The problem ist the attribute [PARAMS] from the timestamp: [CODE]
explanation=The Attribute [PARAMS] starts with leading zeros. 
explanation=According to the JSON rfc4627 this is an invalid JSON number.
useless=Is it possible to correct this and remove the leading zeros?
class=bug-6-2755

title=The log file is abnormal when configured as RollingFile
explanation=After updating to the latest version, this problem still exists
example=[URL]
class=bug-7-2615

title=StackOverflowException when server not reachable with SocketAppender
current=SocketAppender crashes log4j with StackOverflowException when the server where the log file should be sent is not accessible. 
explanation=It looks like [METHOD] contains recursion.
explanation=This also happens in 2.11.2 (even though log shows 2.11.0).
explanation=This does not happen in 2.8.2 ( [METHOD] methods were not there in that version)
explanation=[TRACE]
class=bug-8-2592

title=Thread indefinitely blocked when logging a message in an interrupted thread
current=Logging a message to the Flume appender in an interrupted thread undefinitely block the thread.
explanation=The thread is blocked in an infinite loop here :[CODE]
explanation=This test case allows to reproduce the problem
explanation=[CODE]
class=bug-9-2388

title=could not load library jansi-1.8
current=HI I get an log4j2 error I can only reproduce in conjunction with openejb. 
current=I only need to create a simple static final Logger in a class annotated @Stateless and I get the following error:[TRACE]
class=bug-10-1461

title=[EXCEPTION] from AsyncLogger
current=We've got several times following [EXCEPTION]: [TRACE]
explanation=What is interesting this NPEs always preceeded by [CODE
class=bug-11

title=uses wrong time for filename
current=When there are both size based and time based triggering policies, if the size based policy is triggered, the file is named as if the time based policy was triggered.
example=Example config: [CODE]
class=bug-12

title=Log4j2 async logger threads are locked on WAITING
current=Recently our server stopped responding and from thread dump we found that most threads are blocked in "WAITING (parking)" state on logging. 
useless=Any advises are welcome.
explanation=Attaching selected threads dump and [FILE]
class=bug-13

title=Thread crash when parameter is a null value for [PARAMS]
explanation=[CODE]
current=This will crash. 
explanation=It is not supposed to happen, but sometimes a parameter can be null unexpectedly.
expected=MapMessage should be "null safe".
explanation=[URL]
class=bug-14

title=UuidUtil array index out of bounds exception
useless=User sent me this. 
explanation=No idea how to reproduce.
explanation=[URL]
explanation=Line 55: [CODE]
class=bug-15

title=Priority of the Event is not calculated correctly
explanation=We are having a problem with the Priority of the event created by the log4j2 API.
explanation=[TRACE]
current=We are seeing the Severity is not being added when calculating the priority. 
explanation=We have test with another facility, and the multiplication is ok, but in every case the Severity is not added.
useless=Is this a known problem?
useless=There is something wrong with our configuration?
class=bug-16

title=Custom appenders no longer found with Java 11
current=After upgrading to Java 11, the custom appenders are no longer found. 
current=The following errors are shown when running the app: [TRACE]
explanation=The log4j config file can be found here: [CODE]
explanation=and the appender here: [CODE]
class=bug-17

title=SocketAppender in UDP mode can't split messages
explanation=We are using rsyslog wit udp.
explanation=There is a problem with messages that exceed 64k size.
current=The default TCP mode sends a new record when a new line symbol occurs.
current=The UDP mode doesn't.
explanation=There is no possibility in UDP to split the message in parts. 
class=bug-18

title=ERROR NoSql contains an invalid element or attribute "MongoDb3"
current=I'm trying to setup log4j2 with mongo db in a very simple java project, but log4j keeps throwing me the following error
explanation=[TRACE]
explanation=This is my current log4j2.xml: [CODE]
explanation=And these are the dependencies I have: [CODE]
class=bug-19

title=JDBC Append should reconnect when connection is lost in [METHOD]
expected=JDBC Append should reconnect when connection is lost in [METHOD]
explanation=[TRACE]
class=bug-20

title=Package filter not working with %ex conversion pattern
current=When using this log pattern in a RollingFile appender, the packages are not filtered out: [CODE]
current=If instead I use: [CODE] then they are filtered out.
explanation=According to the documentation both should work.
class=bug-21

title=Out of Memory issue log4j2 Async Appender stops
current=In one of the systems observed below out of memory
explanation=[TRACE]
class=bug-22

title=[METHOD] in [EXCEPTION]
current=When exiting I always get the following exception
explanation=[TRACE]
class=bug-23

title=Logs roll error when decrease the max count of log files
current=When using log4j2 version 2.11.1, and the original configurations like below: [TRACE]
class=bug-24

title=System property [PARAMS] with drive letter gives exception but works
current=Setting system property [PARAMS], while working, the content is properly evaluated, first logs the following exception
explanation=[TRACE]
class=bug-25

title=[ERROR]: [CLASS]
current=Facing [ERROR] when using Java 11 
explanation=[TRACE]
class=bug-26

title=[EXCEPTION] when compiling plugin with Eclipse batch compiler
explanation=Recently I started using log4j 2 in my project and I created some custom appenders and configuration factories using the [PARAMS] annotation.
current=It all worked fine and show no errors compiling in Eclipse 4.9 and IntelliJ Idea. 
current=However, using the Eclipse batch compiler, my code fails with the following stacktrace: [TRACE]
explanation=In order to reproduce this bug, I created this project with the minimal code to test my scenario.
class=bug-27

title=[METHOD] cannot delete folder
explanation=My logs are store in daily folders, such as 2018-10-01, 2018-10-02 ... , and i only want last 5 days logs.  
current=Log4j2 can delete log files 5 days ago, but the folder were still there, can you delete the folders too?
explanation=my config file: [CODE]
class=bug-28

title=OutOfMemory: AsyncLogger Threads number increases under unknown circumstances
useless=Hi, 
explanation=I have a strange behavior where my app goes OOM. 
current=when i analyse the heapdump, i find a lot of threads [CLASS] having each 37Mo memory.
explanation=I saw many issues related to this behavior , most of them fixed on 2.6
class=bug-29

title=Events without attributes are not displayed
current=If an event has no attributes, it's not displayed on the UI. 
drawback=This lead to some confusion where I couldn't edit or re-add an event without violating a database constraint or manually deleting the event from the catalog.
class=bug-30

title=log4j2 lookups doesn't default to blank in case of null
current=When we write something like below in log4j2.xml where [PARAMS], Log File will be created at [FILE]
current=but when its not defined, file is created as [FILE] where we keep the variable intact.
explanation=This might be expectation but not mentioned on website and also differs from intuition.
expected=I would have expected  [FILE] if logPath is not defined as system property
class=bug-31

title=log4j-jcl cause memery leak in TomCat 8.5.24
explanation=I build a skeleton Spring MVC project to test this.
explanation=here is my whole dependencies in pom.xml:
current=when undeploy or stop of the Application in TomCat,I got this: [TRACE]
current=I also test this in Spring 4.2.0, It's the same result.
useless=I am a beginner in log4j2, Is there something I missed? 
useless=or it's indeed a bug?
class=bug-32

title=CassandraAppender does not write according to buffer size
expected=According to documentation [URL] , log should be written when bufferSize is reached. 
current=The buffer is cleared, but the batchStatement in CassandraManager does not seem to be reset, resulting in accumulating the statements foreverer ( or until Casandra exception for batch size limit ).
class=bug-33

title=error: cannot find symbol [CLASS]
explanation=from: [URL]
explanation=[TRACE]
class=bug-34

title=highlight not working anymore
explanation=the ansi color support is broken since version 2.9.0 I used to setup my pattern like this: [CODE]
current=but when I updated recently from 2.8.2 to version 2.11.0 it did not work anymore. 
explanation=I tried all versions backwards to 2.8.2 but all versions above 2.8.2 wont work with highlighting...
class=bug-35

title=Status logger write in file a line full of null
explanation=Until log4j 2.10.0 version the status logger didn't write "null" in the file indicated in the xml configuration.
current=it seems to happen when the log4j does not find the configuration in the context of the project, and takes the default configuration.
explanation=[TRACE]
class=bug-36

title=SortedArrayStringMap does allow only filterable ObjectInputStreams
current=When using the JPA Appender it is not anymore possible to use Hibernate.
explanation=During the write process on the appender log4j2 detects a incompatible instance of ObjectInputStream.
explanation=The root of the problem seems to be this change.
explanation=[TRACE]
class=bug-37

title=[CLASS] got wrong file name
explanation=stack: [TRACE]
class=bug-38

title=Upon shutdown async logger fails to drain the log lines
explanation=I am using async logger configuration with [PARAMS] set [PARAMS] with a console appender.
explanation=The application is run using exec. 
explanation=Application will spit out log lines and terminates gracefully. 
current=After upgrading to new release of log4j2 v2.10 (from 2.6) not all log lines are visible on the console. 
current=Looks like log lines are not flushed on application shutdown.
class=bug-39

title=PatternLayout not working properly
current=In PatternLayout log not worling for %M (%method) and %L (%line)
explanation=[TRACE]
class=bug-40

title=Log4j2 Causing Fatal Exception in Android Project
explanation=Moving a Java project with Maven over to an Android project with Gradle in IntelliJ and everything made the transition smoothly except for Log4j2.
current=This error message fires whenever the program tries to create a Logger
explanation=[TRACE]
class=bug-41

title=Chainsaw download link broken
explanation=At [URL]
explanation=Click Download link for more information.
explanation=Link does not lead to [URL]
class=bug-42

title=[METHOD] Incorrect documentation
current=The documentation for [METHOD] incorrectly says it logs at [PARAMS] when it actually logs at [PARAMS].
explanation=[URL]
class=bug-43

title=Logger does not print message in case if stacktrace is empty for Throwable
explanation=There are user defined exceptions which does not print stack trace for security purposes. 
explanation=In this case, Logger render method will return empty stack trace. 
expected=We can return the Throwable message if stacktrace is empty while logging the exception.
class=bug-44

title=Deadlock bug
explanation=[TRACE]
class=bug-45

title=JDK 9 Location info wrong for Solaris Sparc due to JVM bug
current=The StackWalker used to obtain location info when running under Java 9 has a bug on Solaris Sparc. 
current=the line number returned by it is always start of the method, not the actual line number of the stack frame.
explanation=For reference: [URL] and [URL]
explanation=This issue here is to document the problem for people running into it. 
explanation=I think there's not much Log4J2 can do to work around it.
class=bug-46

title=Cannot be configured for Android because of dependency on [CLASS] classes
explanation=[TRACE]
class=bug-47

title=Scala API does not work with IBM Java 8 and Scala 2.12
current=When compiling the API using IBM Java 8 on Scala 2.12 or 2.13.0-M1, the compiler crashes. 
explanation=This appears to be a known issue: [URL]
class=bug-48

title=On shutdown, JDBC appender does not write buffered log messages to failover appender if database is unavailable
explanation=With the following sample config: [CODE]
current=If the database has failed and the application is shut down, the log messages are not written to the failover appender.
class=bug-49

title=On failover from JDBC appender, contents of buffer are not written to failover appender
explanation=With the following sample config: [CODE]
current=If the database fails, the contents of the buffer are not written to the failover log file.
class=bug-50
